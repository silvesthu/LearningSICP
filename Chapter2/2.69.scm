#lang scheme

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))

(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

(define (adjoin-set x set)
	(cond ((null? set) (list x))
		((< (weight x) (weight (car set))) (cons x set))
		(else (cons (car set)
					(adjoin-set x (cdr set)))
		)
	)
)

(define (make-leaf-set pairs)
	(if (null? pairs)
		'()
		(let ((pair (car pairs)))
			(adjoin-set (make-leaf (car pair)
									(cadr pair))
						(make-leaf-set (cdr pairs))
			)
		)
	)
)

(define (successive-merge set)
	(if (pair? (cdr set))
		(successive-merge (adjoin-set (make-code-tree (cadr set) (car set)) (cddr set)))
		(car set)
	)
)

(define (generate-huffman-tree pairs)
	(successive-merge (make-leaf-set pairs))
)

(define sample (generate-huffman-tree (list 
'("A" 8) 
'("B" 3) 
'("C" 1) 
'("D" 1)
'("E" 1) 
'("F" 1) 
'("G" 1) 
'("H" 1)
)))

(provide generate-huffman-tree)

(print sample)