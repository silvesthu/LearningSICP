#lang scheme

; copy from header.scm

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))

; ↓↓↓↓↓↓↓↓

; set and lookup is quite similar already

(define (on-variable-value! var val env found-proc not-found-proc)
  (define (env-loop env)
  	(if (null? not-found-proc)
  		(set! not-found-proc env-loop)
  	)
    (define (scan vars vals)
      (cond ((null? vars)
             (not-found-proc (enclosing-environment env)))
            ((eq? var (car vars))
             (found-proc vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

(define (lookup-variable-value var env)
	(on-variable-value var env (lambda (vals) (car vals)))
)
(define (set-variable-value var val env)
	(on-variable-value var env (lambda (vals) (set-car! vals val)))
)
(define (define-variable! var val env)
	(on-variable-value var env (lambda (vals) (set-car! vals val)) (lambda (enclosing-env) (add-binding-to-frame! var val (first-frame env))))
)